import { AccessibilityCheckerReport } from "../types"
import { calculateElementsWithNoViolationsPercentage } from "./calculateElementsWithNoViolationsPercentage"
import { findCategoryByLevelAndRuleId } from "./findCategoryByLevelAndRuleId"
import {
  Level,
  Category,
  levels,
  SinglePageReport,
  categories,
  RuleCountByLevel,
  RuleCountByLevelByCategory,
  CategoryIssueCount,
  LevelIssueCount,
} from "./types"

/**
 * Uses the data from the accessibility checker report to create a single page report.
 *
 * @param accessibilityCheckerReport The report generated by the accessibility checker tool which should be aggregated.
 * @returns A single page report.
 */
export function createSinglePageReport(accessibilityCheckerReport: AccessibilityCheckerReport) {
  const singlePageReport: SinglePageReport = {
    url: accessibilityCheckerReport.summary.URL,
    categoryIssueCounts: [],
    summary: {
      totalIssueCount: 0,
      levelIssueCounts: [],
      elementCount: accessibilityCheckerReport.summary.counts.elements,
      elementWithViolationCount: accessibilityCheckerReport.summary.counts.elementsViolation,
      elementsWithNoViolationsPercentage: calculateElementsWithNoViolationsPercentage(
        accessibilityCheckerReport.summary.counts.elements,
        accessibilityCheckerReport.summary.counts.elementsViolation,
      ),
    },
  }

  // These variables are used to temporarily store the aggregated data
  const ruleCountByLevelByCategory = createRuleCountByLevelByCategory()
  const reportSummaryRuleCountByLevel = createRuleCountByLevel()

  for (const { ruleId } of accessibilityCheckerReport.results) {
    let ruleLevel: Level | undefined
    let ruleCategory: Category | undefined

    // Try to find the category and level for the current ruleId
    for (const level of levels) {
      const category = findCategoryByLevelAndRuleId(level, ruleId)
      if (category) {
        ruleLevel = level
        ruleCategory = category
        break
      }
    }

    if (!(ruleCategory && ruleLevel)) {
      console.error("Couldn't find category or level for ruleId:", ruleId)
      continue
    }

    // Increment the counts of the temporary variables
    ruleCountByLevelByCategory[ruleCategory][ruleLevel]++
    reportSummaryRuleCountByLevel[ruleLevel]++

    // Increment the actual report values
    singlePageReport.summary.totalIssueCount++
  }

  // Use the temporary variables to populate the actual report values
  singlePageReport.categoryIssueCounts = mapRuleCountByLevelByCategoryToCategoryIssueCounts(
    ruleCountByLevelByCategory,
  )
  singlePageReport.summary.levelIssueCounts = mapRuleCountByLevelToLevelIssueCounts(
    reportSummaryRuleCountByLevel,
  )

  return singlePageReport
}

function createRuleCountByLevel() {
  return levels.reduce((ruleCountByLevel, level) => {
    ruleCountByLevel[level] = 0
    return ruleCountByLevel
  }, {} as RuleCountByLevel)
}

function createRuleCountByLevelByCategory() {
  return categories.reduce((ruleCountByLevelByCategory, category) => {
    ruleCountByLevelByCategory[category] = createRuleCountByLevel()
    return ruleCountByLevelByCategory
  }, {} as RuleCountByLevelByCategory)
}

function mapRuleCountByLevelByCategoryToCategoryIssueCounts(
  ruleCountByLevelByCategory: RuleCountByLevelByCategory,
) {
  const categoryIssueCounts: CategoryIssueCount[] = []

  for (const [category, ruleCountByLevel] of Object.entries(ruleCountByLevelByCategory)) {
    const levelIssueCounts = mapRuleCountByLevelToLevelIssueCounts(ruleCountByLevel)
    const totalIssueCount = levelIssueCounts.reduce(
      (total, { issueCount: count }) => total + count,
      0,
    )

    categoryIssueCounts.push({
      name: category as Category,
      totalIssueCount,
      levelIssueCounts,
    })
  }

  return categoryIssueCounts
}

function mapRuleCountByLevelToLevelIssueCounts(ruleCountByLevel: RuleCountByLevel) {
  const levelIssueCounts: LevelIssueCount[] = []

  for (const [name, count] of Object.entries(ruleCountByLevel)) {
    levelIssueCounts.push({ name: name as Level, issueCount: count })
  }

  return levelIssueCounts
}
